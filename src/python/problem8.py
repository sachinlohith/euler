'''
The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
'''

NUMBER = "73167176531330624919225119674426574742355349194934969835" \
         "20312774506326239578318016984801869478851843858615607891" \
         "12949495459501737958331952853208805511125406987471585238" \
         "63050715693290963295227443043557668966489504452445231617" \
         "31856403098711121722383113622298934233803081353362766142" \
         "82806444486645238749303589072962904915604407723907138105" \
         "15859307960866701724271218839987979087922749219016997208" \
         "88093776657273330010533678812202354218097512545405947522" \
         "43525849077116705560136048395864467063244157221553975369" \
         "78179778461740649551492908625693219784686224828397224137" \
         "56570560574902614079729686524145351004748216637048440319" \
         "98900088952434506585412275886668811642717147992444292823" \
         "08634656748139191231628245861786645835912456652947654568" \
         "28489128831426076900422421902267105562632111110937054421" \
         "75069416589604080719840385096245544436298123098787992724" \
         "42849091888458015616609791913387549920052406368991256071" \
         "76060588611646710940507754100225698315520005593572972571" \
         "636269561882670428252483600823257530420752963450"

def solution():
    result = []
    for index in xrange(0, len(NUMBER)-13):
        result.append(reduce(lambda x, y: x*y,
                             map(int, NUMBER[index:index+13]), 1))
    return max(result)

if __name__ == "__main__":
    print solution()
